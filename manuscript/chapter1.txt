{sample: true}
# Chapter One

This chapter is not the point of this book. You can read it if you like, or skip ahead. This book is designed to be a reference manual, a way to help connect the dots of all these different things people are talking about. A way of better understanding how lean, agile, devops, scrum, Kanban, and the theory of constraints (and maybe some more, we’ll see as I write) connect together. My main objective is to help people to see clearly that these are not disparate concepts. They are not competing with each other. It is not one or the other, one is right and the other is wrong. These ideas, frameworks, methodologies, tools, concepts have learned from each other, been influenced by one another, grown and changed and developed based on what the others have taught. At the end of the day they are all trying to solve the same problem. If you are an agile leader, a team member, a scrummaster, an agile coach, or even a business person who works with technology teams understanding these concepts will help you to build the right thing through iterative development. It will pull you out of the dark, out of the world of confusion, out of the world of building something or having something built that doesn’t meet your needs, your customers needs. These concepts help to eliminate going live with software that nobody likes. With building something that is unusable. With having the people using your software work around the functionality you built to help them. Manual processes, extra reporting just in case, ad hoc checks, and systems that just don’t work like they should. We strive to eliminate that, to make software development a joy for the people building AND using the software.

I first discovered Agile in 2011. I had heard of it and knew it was a thing before then, but it wasn’t until I was working more closely with software development teams that I realized there was a real problem. I have been passionate about technology for a long time, so even though I graduated with a bachelors in Economics with a business minor and didn’t take many computer classes during undergrad, I was trying to build servers out of old computers in my apartment. Get a LAMP stack up and running and run a webserver out of my house. Set up a complicated network to ensure my computers were off the network. I listened to Security podcasts and wondered why it didn’t seem like my organization was following modern security best practices. I had a job as a stock broker, taking calls, helping people place trades, use the website, and encouraging them to manage their financial life in an effective way. One day they announced the technology organization was looking for Desktop Tools SMEs, people who could pilot early software, test, and provide feedback; people who could let the local team know when changes were coming, help the team when things did change, and just provide general local help desk support. I jumped at the opportunity immediately and enjoyed it, I got a lot of positive feedback from my teammembers, they appreciated the help. The technology team seemed enthusiastic about my detailed feedback about why certain features were implemented poorly or didn’t make sense for our workflow, but the company culture and my role meant I could only work with them indirectly. How frustrating! They’d let us know a feature was coming, go into their black box, develop develop develop, and finally deliver – something that wasn’t useful for the field, or wasn’t efficient to use in the world of phone calls and managing your wrap idle time. I knew there was a problem.

I had been trying to find work with technology teams. I wanted to make a move. I thought my knowledge and experience on the business side of things would help me to find opportunities to improve communication between business and IT and lead to improved outcomes and delivering software the customer really wanted. I interviewed for anything at my company in my space that I thought I could learn and pull off. I interviewed for an associate SQL developer, hardware support, desktop tools support, business analyst roles – nothing panned out, I didn’t have a degree in the field or experience, so no one wanted me. My motivation, passion, interest, and pursuit of self learning wasn’t enough. I thought about getting a second bachelors, but was encouraged to pursue a masters degree instead. I looked at all the paths – I knew I wasn’t a developer as I had tried that a few times since I was 8 and it never clicked – and I struggled a lot more with networking and system administration than I expected, it didn’t seem like it was for me. I found a degree path for Information Assurance, all things security, data management, running IT teams, it seemed like the right place for me. I kind of thought Security Analyst would be my path, thought I knew I never wanted to be the CIO. Attackers only have to find one way in to succeed, those folks on the blue teams trying to prevent it have to protect every conceivable entry point. Security, it seemed, was more of an ongoing goal then something you could say was finished. CIO seemed like a risky position to pursue – one major breach or violation, even if it was not preventable, and you’re likely out on your butt.

In one of my earliest classes we had to write a paper about the challenges we saw in our organization. I wrote about business-IT alignment and communication. I only knew about it from my organization, but talking to others and reading online it seemed like this was a widespread problem. A few weeks later we were assigned to research the difference between traditional/waterfall projects and development and agile development. I read the manifesto, the principles, read some articles about successes of agile, and how those who proliferated the ideas were achieving great things. Finally I was reading something that described what I had been thinking and feeling inside, but wasn’t sure how to articulate. Small, incremental changes. Continuous learning and improvement. Kaizen. I was doing these things in my own personal life (not always successfully, but at least trying!) and knew that applying this to my work would help me make the next big step in my career.

I was great on the phones as far as customers were concerned, I gave them what they needed, I explained things in terms that they could understand, and I helped them to see the why. I was not great on the phones as far as the company measured things – my average handle time was too high, my ‘leads’ (sales) were below average, and some of the other “key metrics” around staying busy and at 100% utilization capacity were not great. I had great surveys and customers liked me, but that wasn’t enough. I was disciplined. My manager told me that those measurements reflected on him, and he wanted the special bonus and special trip, and if I didn’t get my numbers up to help him get those things, he wouldn’t help me find another job. How terrible! Managers should encourage their directs to find positions that suit them best, that they can thrive in, and especially since I was looking inside the company – my talents could be put to better use elsewhere and I could help the company! But apparently only if I helped him first.

So I applied agile principles and looked for continuous improvement. I reduced my average handle time by 19% and wound up having some of the highest productivity metrics in the organization. My leads still lagged a bit, but they improved. Everything improved just enough that he finally started supporting my hunt for another job. I still couldn’t find technology work. Even internally I would apply and not hear a word, I would interview and then never hear from the manager again. It was stressful and a struggle. Finally I got an internal, non-IT job, doing back office mutual fund operations. It wasn’t the step I was hoping to take, but this afforded me a lot more opportunities. The teams processes hadn’t been changed in a long time. The folks who did work on that team didn’t understand technology and were happy to do things the same way as they had for 15 years. They were underutilizing technology. But the kicker was that the internal mutual fund website needed to be upgraded and replaced, they had a small project budget and a development team for one year and really needed the outcome to be successful. So I jumped into all these things with gusto. I worked as closely as I was permitted with the developers, doing testing, providing feedback, and essentially acting as a product owner for the product. There was an automatic investment system that allowed people to invest in mutual funds monthly that required a tremendous amount of manual work each month, and I found ways to reduce paper consumption by migrating to electronic systems, and eventually identifying common problems and implementing solutions to reduce the manual work overall. I worked with the team and contributed to some of the highest engagement scores in the company. I found other risks, issues, problems, or things that made day to day work difficult, and suggested and implemented improvements. My boss liked what I was doing and gave me additional responsibilities – working with external fund companies and transmitting monthly fund data back and forth. I joined the folks doing that and discovered every month they were EMAILING files back and forth with fund companies. Most companies wouldn't accept zipped files, so they would say “oh Fidelity will probably require 6 emails” you’d prep the six emails and start attaching the individual files. Every month it was a little different as the file sizes changed, and some months we had a file that was too big for email. These folks were contented to do the same thing over and over, this tedious, inconvenient, frustrating process with emails. “Why don’t we transmit these with secure file transfer, SFTP?” well none of them had heard of it. We engaged with the technology group and started working on a solution, in the end we stopped transmitting files with email and moved to secure file transfer. It reduced manual processing time by hours if not days and made life easier.

I was nearing my graduation date and got heavy with applying to technology jobs again. I saw dysfunction with the business, but thought if I worked with technology teams I could help translate and get the business to better understand how to get the outcomes they desired. Finally I was offered a position as a Business Systems Analyst with a Compliance and Legal team at the organization. It was a mess. A backlog of hundreds of items aged up to 8 years. No onshore development team. No communication with the actual stakeholders who used the application do to their day to day work. No clear organization or approach for pulling work through the system. I tried suggesting changes and improvements and got a lot of “we’ve always done it this way” – I’ll keep my head down and learn, I thought, and eventually move to another position where I can do more.

I didn’t have to move! With a lot of reorganization and restructuring happening my hiring manager was leaving the company. As that was happening the whole technology organization was announcing that they were moving to Agile and Scrum methodologies. I was excited, this was my chance. I offered to drive that change with the teams I worked. I took the first training with the organization and started explaining Agile, Scrum, and Kanban to the teams I worked with. I got them set up in JIRA, got them sprinting or pulling work with flow, and started the transformation. Around that same time I got a new manager who saw my passion and encouraged me to keep doing what I was doing, to learn and grow. He had me read The Phoenix Project and sent me to the DevOps Enterprise Summit in 2016. Holy cow, it opened my eyes. I felt like all these people were succeeding with Agile and DevOps and that here I was stuck on this island of fighting uphill and battling to get people to change. I wasn’t alone! There was a hole community of these folks! I came back with a new zeal and gusto, Agile isn’t just Agile it isn’t just Scrum, it’s DevOps too. We need to communicate more, we need to get better! I had been empowered and I was going to RUN WITH IT. I challenged people, challenged the status quo. In 2017 I got to go to the conference again, and was learning more in my spare time. I was acting ScrumMaster and Product Owner, and a bunch of other roles too, but those were key for me. In 2018 I went to Certified ScrumMaster and Certified Scrum Product Owner which opened up a whole new set of tools, facilitation concepts, and backlog refinement processes that I ate up. I took them back to the team and encouraged everyone to try these things and improve. I got to go to Mile High Agile, the local agile conference in Denver. I started attending the Agile Denver meetups and was learning a ton, all of which I could take back and apply to my teams. In 2019 I got my Advanced Certified ScrumMaster which took facilitation to a whole new level for me. I became a core member of the Agile Denver Kanban Community of Practice. I became a co-chair for my organizations ScrumMaster Community of Practice. I got even more active in my community attending more meetups, more events, DevOps Days, took some more technical DevOps courses with Software Freedom School, and got my CAL I and ICP-ACC.

So now I am here. I have a lot of goals and aspirations. I am about to start my own consulting, coaching, training, and facilitation company. I am trying to join the Agile Denver Board of Directors and the Software Freedom School board of directors. I’d like to present a talk at MHA. I want to help teams accomplish things they can’t do on their own, and I want to break business people of their bad project management habits and stop the pain of 500 page requirements documents and no engagement or feedback. I am excited for where I am and where I am going.

So I don’t know everything. I am not an expert on all these topics. But I read what the experts have to say. And the people who created them. I challenge myself and my beliefs every day and try new things. I learn and experiment and grow. And I think there is something about all these concepts that most people aren’t seeing – how they are really connected and what they really mean. This book is an attempt to break that down, to distill it to its true essence, and provide you the reader with a clear and concise tool to help break misconceptions and misunderstandings and bring the people you work with around to the agile way of working. Because agile is how humans live and grow and develop just by our nature.

I hope this book helps someone, I hope this book helps you.

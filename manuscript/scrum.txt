# Scrum

A chapter on Scrum

Quote from the Scrum book where he says that this was his attempt to put those values and principles into practice

[TODO: Values, ceremonies, roles...]

**Empirical Process Control—This principle emphasizes the core philosophy of Scrum based on the three main ideas of transparency, inspection, and adaptation.**

Empirical process control is basically the scientific method. It is the underlying unerpinnings for basically everything I have talked about in this book. By creating a hypothesis up front about what you think an experiment will prove, then ensuring that all data and information is transparent and available, you have what you need to be able to inspect following implementation of the experiment, and then adapt based on what you learn. If you don't have transparency then you will have insufficient or inaccurate data, often this allows people to manipulate the system or "tell a story" about what is going on - we shouldn't need to tell a story to justify what has been happening! If we are being transparent and honest then the story should tell itself. If we are tracking the right data points and touching base with one another frequently enough I shouldn't need to justify why this work wasn't done by the end of the sprint, everyone should already know because they've heard it and seen it as we were working, or if they weren't as involved in that process all that information should be visible and available. Don't tell stories, show what happened, be honest, clear, open, and transparent.

Inspection is also imperative because how else do you know what you've done, what you implemented, added, or changed is really the right thing to do. Too many people get hung up on making something perfect the first time, or making it THEIR process that they own and they defined as some way to show leadership "look what I accomplished, reward me for this!". Many of these people aren't willing to actually inspect the process they've introduced and see if it's delivering the results they wanted, if it is helping people or making life more difficult, or if it really was the solution that was most needed. This happens not only once something is the standard (but it's really bad there, that's where the most dangerous phrase in the world "we've always done it this way" comes from). Inspection is also needed when you are coming up with your plan that you want to roll out - why put so much time and energy into something that may not be effective and work to make it perfect before rolling it out and getting feedback? As you work through each step, each thing you think needs to happen, it should be shared with the team or those who will be impacted in small chunks so they can inspect and provide feedback often and early. Inspect your plan and make sure it makes sense to the people who will be impacted by it, too many people do introspection instead and are so blinded by themselves and their work that they think it's amazing and the next greatest thing, when really they've just made life more difficult and created a process that is not suited for the team or the problem it is trying to solve.

Finally there is adaptation. I think many people feel like they are doing the inspection piece, but then not adapting based on what they learned. I have seen this in my own career over and over again - some new process or system gets rolled out, they ask for feedback, the feedback is negative, and they double down on whatever it is. Instead of saying "we understand, this is not working for you, we are going to work with you and change it" you hear "well this is how it has to be, we spent 11 months and lots of time making this plan, and so we're going to stick with it". Why even ask for the feedback in the first place! I've even seen rollouts of allegedly agile tools done in a pure waterfall way and heard on meetings about it when asked why they aren't rolling it out more incrementally or getting more feedback, saying "the only way to run this is as a waterfall project... the only way" - if you think that's the only way, then it's going to be the only way! That's just laziness pure and simple, people who do not want to truly inspect and are unwilling to adapt. In the end you wind up with these systems or processes that are heavy handed, make no sense, not well understood, are a pain, and add time and work that is unnecessary. Then the people who roll that out say the teams just don't understand, or are lazy, or don't want to do work instead of recognizing that early feedback and input and a willingness to change would allow them to get the outcomes they desire, while simultaneously increasing compliance as the people who are impacted have ownership over the process and have ensured it is not too overbearing or too much of a burden.


**Self-organization—This principle focuses on today’s workers, who deliver significantly greater value when self-organized and this results in better team buy-in and shared ownership; and an innovative and creative environment which is more conducive for growth.**

Teams should always be permitted to self-organize because they are the ones doing the work, the ones discovering the problems, the ones who if granted this autonomy can figure out the best way to work together and accomplish whatever goal is set before them. I think this doesn't happen as much as it should because the business is unable to paint a clear and compelling vision of what they want, and unwilling to let go of some control so the team can do whatever they feel is best to deliver on those objectives. It's almost as if everyone thinks everyone else is stupid, and I, the VP, am the only person who understands everything - WHY!?! Why are you keeping that information to yourself? Why do you hire people and teams if you aren't going to trust them to do their jobs and get things done? You become the bottleneck! It disempowers teams too - oh how many projects I have been on where the development team has talked a lot about ideas and ways to solve a problem, only to have no voice in the project meeting and be told to do something a specific way that makes no sense. What happens then? You disempower the team. Do you think if you had a good idea and shared it and was shut down immediately or not even listened to because "I'm more senior and I know better" and not allowed to argue or talk back because they're an SVP? NO! The team will just feel like order takers who have to do what they are told and not argue, then when it's unsupportable, or doesn't deliver what was wanted, does that blame go back to the person who made the decision? Nope, the shit rolls downhill and now the development team or the business SMEs/stakeholders are blamed for not getting the desired results, even though that senior person demanded things be done a particular way.

When you empower the team and allow them to self-organize around a problem, there is more shared and collective ownership. The team buys into the mission and vision of what they are building and trying to accomplish - not only that but it ensures they actually understand what they are doing instead of only getting some small pieces. When teams are empowered and given trust and autonomy, they feel safer, and are able to be more innovative and creative. They are more willing to experiment and try things that may seem like an off-the-wall idea, but actually is the best possible soluton to the problem. Or maybe it isn't, but they will learn quickly and make the necessary changes based on what they learned to deliver the desired outcomes.


**Collaboration—This principle focuses on the three core dimensions related to collaborative work: awareness, articulation, and appropriation. It also advocates project management as a shared value-creation process with teams working and interacting together to deliver the greatest value.**

Collaboration is something that only really happens at the high performing team level. The first level is individuals, and this is where a lot of organizations are even though they would argue otherwise. Individuals are working in isolation, working for themselves, working to get ahead. The team doesn't matter as much, and willingness to help is minimized. The next level is cooperation and while better, this still is mainly focused on individuals who ARE WILLING to help one another, but only when I have time or my work is completed. It doesn't matter that you're blocked and that will slow the whole team down in the long run, I will only help you once my work is finished and I can say I did my piece. The next level is a team and this is the start of collaboration. To be in a state of collaboration you must be aware of what is going on with you, with your colleagues, with the application, project as a whole, the whole team. Collaboration is about having a shared goal and objective and being willing to do whatever it takes to help everyone accomplish that goal - if that means not starting that next card because you are going to work with Jack to help him solve his problem and move things forward, then that is more valuable than having lots of work happening at the same time. It usually means quality increases and everyone is moving and rowing together. The final stage is the HIGH PERFORMING TEAM which is just an even more collaborative, open, sharing, team that really does work towards shared objectives together as a team. It may slow progress down in some areas, but quality, and the knowledge that is gained, more than make up for those delays.


**Value-based Prioritization—This principle highlights the focus of Scrum to deliver maximum business value, from early in the project and continuing throughout.**

Prioritization is always challenging, but it can be done, and you can learn how to do it more easily. Value is not based on what I desire or pet projects or influence, it's based on what measurable value are we going to get out of this activity if we do it right now, and what value will we miss out on due to opportunity cost of other things we elected NOT to work on. If you can measure value all the better, but sometimes it is not so simple to measure value. But part of this idea is if we've got 60% of the documented requirements complete, and the business partners using that functionality are getting all the desired value, and the remaining 40% of features aren't really needed or won't make a substantial impact on their day to day or bottom line - maybe we call this functionality done and move onto the next most valuable thing. Too many people get hung up on "we made this plan, and the plan isn't finished, so the work isn't finished" - that's one of the dangers of plans, they need to be flexible and fluid enough that you can change and adapt based on what you learn as you work through the project. Even the planned order of things should not be fixed because you may realize part way through that there are more problems and the team will get more value if the 10th thing on the list is done before the 3rd thing on the list, even though up front the project planning decided this was the right order to deliver value.


**Time-boxing—This principle describes how time is considered a limiting constraint in Scrum, and used to help effectively manage project planning and execution. Time-boxed elements in Scrum include Sprints, Daily Standup Meetings, Sprint Planning Meetings, and Sprint Review Meetings.**




**Iterative Development—This principle defines iterative development and emphasizes how to better manage changes and build products that satisfy customer needs. It also delineates the Product Owner’s and organization’s responsibilities related to iterative development.**




### VALUES

* Courage
* Focus
* Commitment
* Respect
* Openness


### scrum

* Product backlog
* Sprint planning
* Sprint backlog
* Scrum team
* Daily Scrum / Standup
* Sprint Review
* Increment/ Product Increment
* Sprint Retrospective

### roles

* Product owner



* scrummaster



* Development team

Scrum recognizes no formal titles other than "development team member". That is not to say there is no specialization or people who are focused on any specific area. Rather this is intentional so as to say no one person has the responsibility of a set of tasks, that all work is the responsibility of the development team. So "jack was out of town" shouldn't be an acceptable excuse because while he would be faster and better at the task, the team should be cross functionally trained at least well enough to support in that way. The development team is responsible for delivering the product increment, the scrummaster is responsible for helping them and facilitating their progress, and the product owner is to make sure they know what to build and any questions or clarifications can be given as fast as possible.

### Steps from Scrum book

1. pick a product owner
2. pick a team
3. pick a scrummaster
4. create and prioritize a product backlog
5. refine and estimate the product backlog
6. sprint Planning
7. make work visible
8. daily standup / daily scrum
9. sprint review / sprint demo
10. sprint retrospective
11. immediately start next sprint cycle with learnings taken into account

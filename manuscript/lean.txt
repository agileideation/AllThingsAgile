# Lean

This chapter is about Lean

It's funny to me how little people talk about Lean when Lean is really the origin of most of this stuff that we do. In the Scrum book he mentions that article about finding Lean and Taiichi Ono. Kanban is based on Lean. Even the Theory of Constraints and Lean came up at the same time. No matter how you slice it, Lean came first, it is the granddaddy of them all. And it should be more respected and valued, because the principles and concepts behind lean tie directly into this Agile software development thing we are trying to do.

[TODO: Lean values and principles]

[TODO: Lean vs Lean Software - separate chapters?]


### Original 5 Values

1. Identify value
2. Map the value stream
3. Create Flow
4. Establish pull
5. seek perfection


### 7 Modern Tenants

1. Optimize the whole
2. Eliminate waste
3. Create knowledge
4. Build quality in
5. Deliver fast by managing flow
6. Defer commitment
7. Respect people


### Lean Software Development

Lean philosophy regards everything not adding value to the customer as waste (muda).

Such waste may include:

* Partially done work
* Extra features
* Relearning
* Task switching
* Waiting
* Handoffs
* Defects
* Management activities

Industry research revealed these software development wastes:

* Building the wrong feature or product
* Mismanaging the backlog
* Rework
* Unnecessarily complex solutions
* Extraneous cognitive load
* Psychological distress
* Waiting/multitasking
* Knowledge loss
* Ineffective communication.

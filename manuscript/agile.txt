# Agile

This chapter is about Agile.

I haven't talked to anyone on the agile manifesto, but I have read their books and tweets and blog posts and listened to podcasts and talks and watched videos as much as I can, this is my best interpretation and understanding, and how I personally apply this.


This chapter I will give very brief history on Agile, then go through values and principles and a section for each.

NOTE: Talk about how in Scrum book he talks about Agile not being a methodology

## Brief history

[TODO TODO]

## Values and Manifesto


### We are uncovering better ways of developing software by doing it and helping others do it.

This is the most important line in the Agile Manifesto, but one that many people blow by without thinking about it. This sentence has not changed since the Agile Manifesto was published in 2001, and I suspect it may never change. The manifesto does not start "we have discovered the perfect way of developing software and everyone should do it our way".

This line is extremely clear, in my opinion, but let's break it down:

* We are uncovering
* Better ways of developing Software
* By doing it
* and helping others do it

**"We are uncovering"** tell us that even these people, the experts in their field, do not feel they have found the answer, it is still exploratory, they are still learning, we are still discovering and uncovering.

**"Better ways of developing software"** not the best way of developing software, not the prefect way, not the one way, but BETTER ways. I think this part gives a lot of indication that they want to continuously explore, and just because a way or method was better for one group of people, may not work for someone else. It's better ways of developing software because we should always be uncovering improvements, things that work for specific problem spaces. There will never be one best way, but we can always identify better ways of working. Especially as we change teams or the team changes around us or we work with new people we may discover things that are 'better' in that instance that were not 'better' or even possible in other situation.

**"By doing it"** not by talking about it or thinking about it, but identifying something we think will make software development better and then actually trying it. Actually eating our own dog food. Actually practicing what we preach. If I think I've discovered a better way of developing software I should try it, whether it's on my own if I am a developer, or encouraging the developers I work with to do it, the only way to take something that is an idea and turn it into actually "uncovering" the "better way to develop software" we have to try it out and see how it works. Maybe something we think will work, once we try to do it ourselves, it won't work out.

**"And helping others do it"** This isn't about figuring this stuff out in a vaccuum and becoming that mythical 10x developer who is the only one who knows how to do something. It may lead to some job security, but you've now become a bottleneck, a Brent (Phoenix Project). And in some cases you may actually work yourself out of a job if you aren't willing to share - if it were up to me and someone kept information to themselves and refused to share, they would not be long on my team. We help others do it because what worked for us may not work for others. We help others do it because I may have come up with a great idea that works great, but there is missed potential or ways to make that idea EVEN BETTER but I don't get that additional information and extra brain power because I refuse to share.

This first line in the agile manifesto says that our work is never done, we are constantly learning, experimenting, exploring, and discovering. It says that we are always looking for better ways to do things, small improvements, not accepting that this way is a "best practice", but maybe that it's a "leading practice" - maybe it is the best, maybe it's just better and someone else can make it better still and get it closer to being the best. We can only do this by trying and experimenting, and failing, and trying again, and WE MUST SHARE what we learn because anything in isolation is not as good as when you can get more brain power working to solve the problem. Someone who looks at things differently than you may come up with the perfect solution to your problem, but if you live and work in a vaccuum and don't share and learn from others you will never reach the best you can be.


**Through this work we have come to value:**

In the manifesto they use a specific format of X OVER Y. They talk about it at the end, but many people seem to take this as the things on the right don't matter, aren't important, should be eliminated, or ignored. NOT AT ALL. The key thing here is that historically there has been too much focus and concern for the things on the right, while ignoring the things on the left. As we jump in you'll see many of the items on the right lead to waste, while the items on the left lead to value.

### Individuals and interactions over processes and tools

Individuals and interactions are how things get done! If you want to clearly understand something, someone's point of view, you need to be 1 on 1 and interacting directly. Think about the difference between an Ikea manual, having someone tell you how to build it over the phone, watching a video, having someone explain it over video chat, or having someone with you in person walking you through how to put that dresser together. You can be successful with all of them, but any with direct interaction will be better, and having the person in the room will be the best.

Processes and Tools is interesting to me because that is what's easy for businesses and enterprises to put into place and measure. If something breaks down as a result of communication that is hard to measure, if you say this is the process you follow for this, we want to see all this documentation and material it's easy to measure that it was completed (assuming people don't fudge or game the system, which will always happen). A process feels concrete and solid, but process gets in the way. When you have a 50 step process to follow, but only 18 of the steps apply to your team/project/deployment/release, but you have to do them anyway, it slows you down, makes things harder. It also causes breakdown in communication because there becomes an assumption that it doesn't matter if I say that here or mention that now because the process will catch it or prevent it. I may feel I don't have to talk to you about what I want because I wrote it down, so you should just understand my meaning. Just the knowledge loss between my brain as I write this and the input of whoever might read it is tremendous.

Tools get in the way. Think about delays because your video meeting app didn't work quite right. Or participation in those meetings. "Sorry I was on mute". Have paper and stickies ever really let you down?

Put people and communication first. That is how things get done, how they get done right.

### Working software over comprehensive documentation

Once I received in the mail 8 binders with over 500 pages of 8x11 sheets of paper in each one with all the original specs and documentation for the application I had worked on for 3 years. This application was roughly 15 years old at this point, with people coming and going, and knowledge being constantly lost. The business analyst I wound up taking over for had been on the application for 3 years and when she started was given no knowledge transition and these binders. As I flipped through this documentation a few things became abundently clear. #1 - Someone, some combination of someones, had spent hundreds if not thousands of man hours putting these things together. #2 - All of this stuff was HORRIBLY out of date. None of it matched the current functionality of the system. There had been so many new features, patches, security upgrades, and whatever else that the documentation was useless.

On a project I worked on recently, before the project was approved and funded, people were pulled into meetings for up to 20 hours a week to start documenting the improvements, workflows, and process maps of this new hypothetical system. 3 months later, the project is only finally funded, nothing is built, and the project team spends 15 minutes discussing if they should change the name of the project (not the name of the system/application, but the name of the project in the project tracking system and process). With 15 people on the call and we'll assume an average hourly rate of $100/hr that's still a nearly $500 dollar decision. How much value did that add? How much value are those process maps?

Instead of working so hard to create documentation to hand over to the development team, that time and money is better spent working with the development team and letting them build. The concept of Mob programming is beyond the scope of this book, but in the most ideal scenario you would have developers, product people, designers, stakeholders, architects, or whoever else in the same room working together and providing real time feedback to one another. If you can get a prototype up and running, maybe even a usable potentially releasable though feature-weak, you will not only get better and more immediate feedback, but may be able to provide a small amount of value immediately - instead of waiting months to pull requirements together.

Take an idea and build something quick with just enough to get feedback and do a cycle to continuously improve. All that documentation is stale as soon as it is written, and challenging to maintain - only create the minimum necessary documentation and ensure it is valuable and easy to maintain and update.

### Customer collaboration over contract negotiation

This is more about creating a plan and following a plan than it is about literal contracts as documentation. The way they mean it is in terms of "this is the scope that we want, this is when we want it by" or "this is the scope we want, give us estimates that we can rely on and hold you accountable to." The problem is humans are bad at estimating in general, and software development is not really an easy and repeatable task, it's new and a learning experience every time. An estimate is a "maybe" from the team - "maybe" it can take this much time, but who knows maybe we'll run into unexpected problems and all of this will be totally wrong. Contract negotiation also enforces a stopping point that might not be the right place to stop. There's always the possibility that after 10 weeks of development and regular deployments your customer will have all the functionality they need, even though it's only 30% of the plan, and would rather have the developers move on to something that is now more valuable to them - contracts don't usually permit this and can result in waste and features that are never used.

Work with your customers! The #NoEstimates movement takes it so far as to say "We work on whatever is most valuable either until it is complete, or until it is not the most valuable thing anymore." This is where sprinting can come in handy so as to not change directions to fast or frequently while still allowing pivoting as needed. Allow estimates to be more organic and just help to provide some information to make better decisions, but don't stick to them.

### Responding to change over following a plan

Dwight D Eisenhower once said "following a plan is useless, planning is indispensible" ***CHECK THIS***

No one knows what is going to happen, and no plan is going to be able to keep up with reality. I have never seen a plan that was followed perfectly or had all the required things happen to make sure it became reality. This applies to everything - vacations, hikes, work, daily plans, weekly plans, cooking competition shows - things go wrong, the unexpected happens. Anything that can happen will happen.

So agile isn't as much as about wanting change or thinking it is great, it's about the fact that change is inevitable and you should expect it and be prepared to respond to it. Be flexible. I actually find agile is a LOT MORE planning, it's just shorter time scale planning and letting the bigger picture or longer term details stay more generic and get filled in as the project goes.

You know the least at the start anyway, so how can your plan be any good? If you've never run a day in your life before and decide to train for a marathon, pick this perfect plan, and get started only to discover 3 days in the volume is too great and you are too sore and tired to do the next days workout, would you stick to the plan? NO! But if you have an overarching plan and objectives (I need to progress this much and in this way) but are flexible in the specifics you can adjust the plan based on what your body can take.

This works the same way with software development. Maybe you're blocked, maybe something isn't possible, maybe the market has shifted and now the original plan provides no value, why would you stick with that plan? Why would you double down on something that is no longer worth spending time and energy on.

### That is, while there is value in the items on the right, we value the items on the left more.

This can't be re-iterated enough. Too many people read the manifesto and think Agile means NO documentation at all, no processes and tools. Some people read it and think it means no planning. It doesn't mean any of those things, it just means if you aren't putting people, communication, working software, and flexibility first you are selling yourself short and blocking yourself from reaching your maximum success potential.



## Principles

We follow these principles:

### Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.

As software craftspeople the final outcome is to deliver to the user something that provides them value and helps them accomplish whatever they were wanting to. If not for that why do we have jobs in the first place. Facebook and Google wouldn't exist if it hadn't wanted to provide value to users (though the customers are now advertisers instead of users). Continuous delivery is about not keeping unfinished work in the pipeline, that being anything that isn't done and deployed into production is of no value or use to anyone, you aren't even getting as much feedback on it as you could be (have you ever tried to get users to use an alternate version by giving them an alternate URL? much easier to switch them over and roll back or even better fail forward, but hopefully your pipeline doesn't allow that kind of quality through in the first place). And that's the emphasis on valuable software - software that is buggy or doesn't work as expected or doesn't provide the desired value is not valuable software!!!


### Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.

To me, in a way, this has a lot to do with stoicisim. Change is inevitable, what is needed changes as people experience it (just as building something changes how you want to develop it). If you follow the first principle and deliver early to the customer, then features which you may feel are incomplete may be meeting the customers needs and do not need to be finished any further (as long as there aren't any bugs!) If we are focused on value and competitive advantage, then we need to be flexible enough to adjust the requirements as we discover what works, and what customers and end users like.


### Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.

As we get into DevOps we'll see a lot more of this, but this principle focuses on defining what the continuous deployment above really means. There is this almost ideal build it on the couple (2) weeks, up to a couple (2) months, which when this was written would have been a big departure from the 6-12 months of delays before having working software. The focus on a shorter timescale is about having tighter and faster feedback loops and getting customer input and end user feedback as soon as possible so you can pivot early or adjust and make improvements. sometimes shorter isn't always the goal, though, if you think about working out weighing yourself daily can be disheartening because your bodyweight can vary as much as 5lbs in a day because of fluctuations in water and food in your system. Go for the shortest reasonable timescale possible.

### Business people and developers must work together daily throughout the project.

How else can you get fast feedback? How else can you know you are building the right thing? If a developer is going to have work finished to show off, or has questions about where a button should be or what color something needs to be, if the business people, those people representing the product aren't involved on a daily basis, then time is being wasted on the wrong thing, if we could have learned sooner that we didn't need to build something we shouldn't build it in the first place!

### Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.

If you can paint a compelling vision and clearly express what outcomes you want, and bring in people who are motived to work hard and do a good job and solve problems, and you give them the environment they need to be successful, and then whatever support they need to overcome blocks and impediments, those people will work together and create whatever is needed to solve the problem they need to solve. If there was excessive up front planning and too many cooks what is built never matches those original plans anyway, so why not just let the team build things on the fly and get fast feedback as you go. If you don't support your teams, they won't be able to succeed. If they don't have the environment they need to succeed, they will at best deliver something, at worst fail miserably. Imagine constant blocks and impediments that aren't resolved quickly and gracefully at a management level and think about how much that slows a team down.

### The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.

Many places will claim that they can be distributed or remote or flexible working conditions and experience success, and I'm not going to say they don't experience success, but there is a barrier to communication that is added when you are not face to face. Already humans are pretty bad at communicating with one another clearly (see crucial conversations, fierce conversations, and radical candor), when we take away seeing each others faces, when we add the difficulty of calls cutting out, internet dropping out, it hard to hear or understand due to office volume and your headsets ability to cut through the din. You have so many more options for communication when you are face to face also - you can draw, diagram, map with ease on a white board or using sticky notes, tools online are much more difficult to use no matter how well they are designed. There is something about handwriting and the tactile movement of taping up 3x5 cards or placing sticky notes that reinforces the learning and enforces shared understanding and ubiquity of language.

### Working software is the primary measure of progress.

If we aren't measuring our progress against a plan, how do we know we are making progress? It's too abstract and difficult to measure return on investment or business value or actual dollars of profit in most cases, at least to translate that directly to the development team. So instead lets look at how much software we've actually created, how much functionality have we built, how much manual work and toil have we eliminated as a result of the software we release to the world.

### Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.

I feel like the language on this principle is even too soft. Agile processes promote sustainable development should really say agile processes support people and promote a healthy lifestyle and ensuring that personal life is taken care of to allow you to be as productive as possible at work. A constant pace indefinitely means as fast as possible, but as slow as is necessary. Even when people take vacations, or experience life events that cause them to be out of the offie, the team should be working at a pace that is sustainable. If you are working overtime to fix bugs, or staying up late and working after hours to do deployments or solve production incidents, that is not a sustainable pace. That is a problem. That pace needs to be focused on software quality and testing as part of the process so all work is only done when it is done well and will not require rework in the future. If code is difficult to change and requires heroics in the future to make minor changes, that is not sustainable.

### Continuous attention to technical excellence and good design enhances agility.

I started getting into this in the last section, but this goes even deeper. If agilisty is about small experiments and short feedback loops, then a focus on technical excellence and good design is imperative. Technical excellence means the code quality is good, it makes sense, it has been refactored to be clear and concise. Good design allows a system to be flexible and adapt to change in the future. If agility is about trying new things and finding better ways to do software development, then having bugs that cause the system to go down, or barriers like bad architecture or poor design that make it difficult to add new or modify existing features, then it is difficult to learn and change and adapt because the time that could be spent reflecting and improving is instead spent just trying to keep the wheels on the bus and stop the whole thing from falling apart.

### Simplicity--the art of maximizing the amount of work not done--is essential.

Why over do it? Why do more than is necessary to get the value out that you are seeking? Why design for functionality that may or may not exist in the future? Make things simple and easy to refactor, then you can add changes as needed when you go forward. Why build features that no one needs or no one will use? Something like 40-605 (CHECK THIS) of features that are built are never used, or under used, or have no purpose. Build only what is needed. Do not over-complicate your software. Don't make your tooling or systems or process or pipelines more difficult than they need to be. Do exactly what is needed and nothing more.

### The best architectures, requirements, and designs emerge from self-organizing teams.

There's a terrible saying that "what one developer can do in one month, two developers can do in two months" which is to imply that developers are slowed down by working with others. Sure something may be delivered in that one month, but is it really the best? Is it going to stand the test of time? If so, why do so many people trust open source software? Why is it better to have a huge community building something than one person keeping all the information to themselves (imagine if only the creator knew how blockchain works, would anyone trust it?). If that's the case, why would you only want one person to know how your software works at your company? Why would you only have one person understand how some piece fits into something else. If you force teams to follow some process, or divide up responsibilities like "the architect does the architecture alone" and 'the developers do the design after the business does the requirements and sends them over" do you really think you'll wind up with the best software? Maybe that jr developer read about a technique that the sr guy hasn't heard of that will make this process easier and more supportable into the future. Don't force the process or steps, state the purpose and vision and desired outcomes and let the team organize themselves and figure out the architecture, requirements, and design as they learn and move forward with the project.

### At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.

How do you really get better at something? Say running, for example. Do the best runners just go out and run every day, some distance, with no intent or purpose? NO! They track and measure their progress, have a progression and steps and phases to get where they need to go. "My plan says to do distance running, but my speeds are much slower than I need them to be" maybe you need to adjust and do more speed work to get faster, and then work on distance at that speed. How would you know if you aren't tracking, then looking at that data you are collecting and reflecting on what you've done, then adjusting and tracking and reflecting again to see if those adjustments are working. There's the concept of the PDCA cycle - plan, do, check, act - make a plan, try to the plan, check the results of the plan, then act on those results and make a new plan that incorporates what you learned or discovered. You must build this in and make time for this as this is one of the easiest things to let go of or let slip first. It is hard to really reflect on yourself and be honest with yourself and change things about yourself to be better, and it is easy for us as humans.
